import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

# Step 1: Use your extracted data (replace X with actual data)
# run the process_2.py and get the response of print('X[:5] ==>> ', X[:5])
# X = np.array([
#     [54.,  6., 23.,  6.,  3.,  0.,  6.,  4.],
#     [33.,  8., 24.,  7.,  2.,  0.,  4.,  4.],
#     [19.,  9.,  2., 11.,  0.,  5.,  6.,  4.],
#     [30.,  7., 11.,  6.,  1.,  0.,  8.,  4.],
#     [57.,  8., 22.,  6.,  3.,  3.,  6.,  3.],
# ])

X = np.array([
    [3., 2.],
    [3., 3.],
    [2., 2.],
    [3., 2.],
    [3., 3.],
    [3., 3.],
    [3., 3.],
    [3., 3.],
    [2., 2.],
    [3., 3.],
    [3., 3.],
    [2., 3.],
    [3., 3.],
    [2., 2.],
    [3., 3.],
    [2., 2.],
    [3., 3.],
    [2., 3.],
    [3., 3.],
    [2., 2.],
    [3., 3.],
    [3., 3.],
    [3., 2.],
    [2., 2.],
    [2., 3.],
    [2., 2.],
    [2., 2.],
    [3., 2.],
    [3., 3.],
    [2., 3.],
    [3., 2.],
    [2., 2.],
    [3., 3.],
    [3., 3.],
    [2., 3.],
    [2., 2.],
    [3., 3.],
    [3., 2.],
    [2., 2.],
    [3., 2.],
    [2., 3.],
    [2., 2.],
    [2., 3.],
    [2., 3.],
    [2., 3.],
    [3., 3.],
    [2., 2.],
    [2., 2.],
    [3., 3.],
    [2., 2.],
    [2., 2.],
    [2., 2.],
    [3., 3.],
    [2., 3.],
    [2., 3.],
    [2., 2.],
    [3., 2.],
    [2., 2.],
    [2., 2.],
    [2., 3.],
    [2., 2.],
    [3., 2.],
    [2., 2.],
    [2., 2.],
    [2., 3.],
    [3., 2.],
    [3., 3.],
    [2., 2.],
    [3., 3.],
    [2., 2.],
    [3., 3.],
    [3., 3.],
    [3., 2.],
    [3., 3.],
    [3., 3.],
    [2., 2.],
    [2., 2.],
    [2., 2.],
    [3., 3.],
    [3., 2.],
    [2., 2.],
    [3., 2.],
    [3., 2.],
    [2., 1.],
    [3., 2.],
    [3., 2.],
    [3., 3.],
    [3., 2.],
    [2., 2.],
    [2., 2.],
    [2., 3.],
    [3., 3.],
    [3., 2.],
    [1., 1.],
    [2., 2.],
    [2., 3.],
    [3., 2.],
    [2., 3.],
    [3., 3.],
    [2., 3.],
    [3., 3.],
    [2., 2.],
    [3., 3.],
    [2., 2.],
    [2., 2.],
    [3., 2.],
    [3., 3.],
    [2., 2.],
    [2., 2.],
    [3., 3.],
    [2., 2.],
    [2., 2.],
    [3., 3.],
    [3., 3.],
    [3., 1.],
    [3., 2.],
    [3., 3.],
    [2., 3.],
    [3., 3.],
    [2., 2.],
    [3., 3.],
    [3., 3.],
    [3., 3.],
    [3., 3.],
    [2., 2.],
    [2., 2.],
    [3., 3.],
    [3., 2.],
    [3., 2.],
    [2., 3.],
    [2., 2.],
    [3., 3.],
    [3., 3.],
    [2., 2.],
    [2., 2.],
    [1., 2.],
    [2., 1.],
    [1., 3.],
    [2., 3.],
    [1., 1.],
    [3., 1.],
    [2., 3.],
    [1., 2.],
    [1., 2.],
    [2., 3.],
    [3., 2.],
    [3., 3.],
    [2., 2.],
    [1., 3.],
    [1., 1.],
])


# Step 2: Apply k-Means (choose k=3)
k = 3
kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
kmeans.fit(X)
labels = kmeans.labels_
centroids = kmeans.cluster_centers_

# Step 3: Print Cluster Assignments & Centroids
print("Cluster Labels:", labels)
print("Centroids:\n", centroids)

# Step 4: Visualization (First 2 Features Only)
plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis', alpha=0.6, edgecolors='k')
plt.scatter(centroids[:, 0], centroids[:, 1], c='red', marker='X', s=200, label='Centroids')
plt.xlabel("Feature 1 (Age)")
plt.ylabel("Feature 2 (Sleep Duration)")
plt.title(f"k-Means Clustering (k={k})")
plt.legend()
# plt.show()
plt.savefig("k_means_plot.png")

